cat << CTAG
{
    name:CPU,
    elements:[
    { SLiveLabel:{
					refresh:0,
					style:italic,
					action:"$BB echo MSM_Limiter \`$BB cat /sys/kernel/msm_limiter/msm_limiter_version\`"
		}},
	{ SLiveLabel:{
		title:"Scaling Frequencies",
		description: "Scaling max-min frequencies are affected by thermal engine/driver, mpdecision hotplug driver and CPU Boost driver. You may enable and use MSM Limiter Driver below to make sure scaling frequencies are desired ranges MOST of the time. We do let other drivers affect scaling frequencies because this manipulation helps to achieve performance without compromising stability. Below live monitor reflects actual scaling max and min frequencies in MHz per CPU core.",
		refresh:1000,
		action:"live SCALINGFREQ"
	}},
	{ STitleBar:{
		title:"MSM Limiter"
	}},
			{ SCheckBox:{
				label:"Enable",
				description:"This enables overriding of current CPU Max/Min Frequency. It also set CPU Max Frequency whenever device resumes and suspends and set CPU Min Frequency whenever device suspends. Below controls will work ONLY if MSM Limiter driver is enabled. Ideal max frequency should always be higher than min frequency and input boost frequency. Ideal min frequency should be lesser than max frequency, max screen off frequency and input boost frequency.",
				default:`cat /sys/kernel/msm_limiter/limiter_enabled`,
				action:"generic /sys/kernel/msm_limiter/limiter_enabled",
	}},
	{ STitleBar:{
		title:"MPDECISION"
	}},
			{ SCheckBox:{
				label:"Enable",
				description:"toggle to control mpdecision, This adds toggle which can be enabled to allow mpdecision altering min-max frequencies.",
				default:`cat /sys/kernel/msm_limiter/mpd_enabled`,
				action:"generic /sys/kernel/msm_limiter/mpd_enabled",
	}},
	{ SSeekBar:{
       		title:"CPU0 Max Frequency",
				description:"Set the maximum frequency the CPU0 scales up to. CPU0 is used for most critical kernel tasks, it is recommended not to reduce this frequency below 1.7 GHz,",
				default:`cat /sys/kernel/msm_limiter/resume_max_freq_0`,
				action:"generic /sys/kernel/msm_limiter/resume_max_freq_0",
				values:{
`
				while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
				done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU1 Max Frequency",
					description:"Set the maximum frequency the CPU1 scales up to.",
					default:`cat /sys/kernel/msm_limiter/resume_max_freq_1`,
					action:"generic /sys/kernel/msm_limiter/resume_max_freq_1",
					values:{
`
				while read FREQ TIME; do
					LABEL=$(expr $FREQ / 1000)
					echo "$FREQ:\"${LABEL}MHz\", "
				done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU2 Max Frequency",
					description:"Set the maximum frequency the CPU2 scales up to.",
					default:`cat /sys/kernel/msm_limiter/resume_max_freq_2`,
					action:"generic /sys/kernel/msm_limiter/resume_max_freq_2",
					values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
				done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU3 Max Frequency",
					description:"Set the maximum frequency the CPU3 scales up to.",
					default:`cat /sys/kernel/msm_limiter/resume_max_freq_3`,
					action:"generic /sys/kernel/msm_limiter/resume_max_freq_3",
					values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU Max Screen Off Frequency",
					description:"Set the maximum frequency all CPUs scales up to when device is suspended.",
					default:`cat /sys/kernel/msm_limiter/suspend_max_freq`,,
					action:"generic /sys/kernel/msm_limiter/suspend_max_freq",
					values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
				done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU0 Min Frequency",
					description:"Set the minimum frequency the CPU0 scales down to.",
					default:`cat /sys/kernel/msm_limiter/suspend_min_freq_0`,
					action:"generic /sys/kernel/msm_limiter/suspend_min_freq_0",
					values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
				done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU1 Min Frequency",
					description:"Set the minimum frequency the CPU1 scales down to.",
					default:`cat /sys/kernel/msm_limiter/suspend_min_freq_1`,
					action:"generic /sys/kernel/msm_limiter/suspend_min_freq_1",
					values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
				done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU2 Min Frequency",
					description:"Set the minimum frequency the CPU2 scales down to.",
					default:`cat /sys/kernel/msm_limiter/suspend_min_freq_2`,
					action:"generic /sys/kernel/msm_limiter/suspend_min_freq_2",
					values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
				done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU3 Min Frequency",
					description:"Set the minimum frequency the CPU3 scales down to.",
					default:`cat /sys/kernel/msm_limiter/suspend_min_freq_3`,
					action:"generic /sys/kernel/msm_limiter/suspend_min_freq_3",
					values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
				done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	
					`if [ -d "/sys/module/alu_t_boost/parameters" ]; then
					$BB echo '{ SPane:{
							title:"Alucard Touch Boost Driver"
						}},'
					if [ -f "/sys/module/alu_t_boost/parameters/debug_mask" ]; then
					DEBUG=\`$BB cat /sys/module/alu_t_boost/parameters/debug_mask\`
						echo '{ SCheckBox:{
								label:"Debug Mask",
								description:"Allows you to activate debug mask for Alucard Touch Boost operations.",
								default:'$DEBUG',
								action:"generic /sys/module/alu_t_boost/parameters/debug_mask"
						}},'
					fi
					if [ -f "/sys/module/alu_t_boost/parameters/input_boost_freq" ]; then
					IBF=\`$BB cat /sys/module/alu_t_boost/parameters/input_boost_freq\`
					$BB echo '{ SSeekBar:{
							title:"Input Boost Frequency",
							description:"This will boost your minimum CPU speed to the selected frequency when you touch the screen or press a button.",
							default:'$IBF',
							action:"generic /sys/module/alu_t_boost/parameters/input_boost_freq",
							values:{ 0:"Disabled", '
								sh $DEVICE CPUFrequencyList
							$BB echo '}
						}},'
					fi;
					if [ -f "/sys/module/alu_t_boost/parameters/input_boost_ms" ]; then
					SYNCT=\`$BB cat /sys/module/alu_t_boost/parameters/input_boost_ms\`
						$BB echo '{ SSeekBar:{
								title:"Input Boost",
								description:"Minimum interval a CPU is boosted when input is detected.",
								unit:" ms",
								min:0,
								max:5000,
								step:10,
								default:'$SYNCT',
								action:"generic /sys/module/alu_t_boost/parameters/input_boost_ms"
						}},'
					fi
					if [ -f "/sys/module/alu_t_boost/parameters/min_input_interval" ]; then
					MBOOSTINT=\`$BB cat /sys/module/alu_t_boost/parameters/min_input_interval\`
						$BB echo '{ SSeekBar:{
								title:"Min Input Interval",
								description:"Minimum Input Interval between touches.",
								unit:" ms",
								min:100,
								max:1500,
								step:10,
								default:'$MBOOSTINT',
								action:"generic /sys/module/alu_t_boost/parameters/min_input_interval"
						}},'
					fi
					if [ -f "/sys/module/alu_t_boost/parameters/nr_boost_cpus" ]; then
					NBC=\`$BB cat /sys/module/alu_t_boost/parameters/nr_boost_cpus\`
					$BB echo '{ SSeekBar:{
							title:"Maximum CPUs Boosted",
							description:"Maximum number of CPUs boosted.",
							min:1,
							max:4,
							step:1,
							default:'$NBC',
							action:"generic /sys/module/alu_t_boost/parameters/nr_boost_cpus"
						}},'
					fi;
				fi`
	
	`if [ -f "/sys/devices/system/cpu/sched_mc_power_savings" ]; then
				SMPS=\`$BB cat /sys/devices/system/cpu/sched_mc_power_savings\`
					$BB echo '{ SPane:{
						title:"CPU Multicore Power Saving",
						description:"Try to group tasks into the least cores possible. The higher the value, the more aggressive the grouping."
					}},
					{ SOptionList:{
						default:'$SMPS',
						action:"generic /sys/devices/system/cpu/sched_mc_power_savings",
						values:{ 0:"Disabled", 1:"Enabled", 2:"Aggressive"
						}
					}},'
				fi`
	
	{ SPane:{
		title:"Power-efficient Workqueues",
	}},
	{ SCheckBox:{
		label:"Enable",
		description:"This will help to reduce power consumption at the cost of slight performance overhead. PE workqueues are used for unbound scheduled work to save load on sibling CPU cores and queuing work on CPU0.",
		default:1,
		action:"boolean /sys/module/workqueue/parameters/power_efficient",
	}},
	
	`if [ -f "/sys/kernel/sched/arch_power" ]; then
				APOWER=\`$BB cat /sys/kernel/sched/arch_power\`
				$BB echo '{ SPane:{
					title:"Arch Power"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"Arch Power uses arch dependent power functions to be used instead of generic high resolution timer ticks and double ticks to reflect the relative capacity of each core.",
						default:'$APOWER',
						action:"generic /sys/kernel/sched/arch_power"
					}},'
				fi`
	
	{ STitleBar:{
		title:"CPU Governor"
	}},
	{ SDescription:{
		description:"The CPU governor determines how the respective CPU behaves in response to changes in workload. Changing the governor will impact how the CPU scales through the frequency steps available."
	}},
        { SOptionList:{
		title:"CPU0",
		default:`cat /sys/kernel/msm_limiter/scaling_governor_0`,
                action:"generic /sys/kernel/msm_limiter/scaling_governor_0",
                values:[
`
                        for GOVERNOR in \`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
                                echo "\"$GOVERNOR\","
                        done
`
                ],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, CANCEL ],
				to:"/sys/devices/system/cpu/cpufreq"
			},
			{
				on:REFRESH,
				do:REFRESH,
				to:"/sys/devices/system/cpu/cpufreq"
			}

		]
        }},
        { SOptionList:{
		title:"CPU1",
		default:`cat /sys/kernel/msm_limiter/scaling_governor_1`,
                action:"generic /sys/kernel/msm_limiter/scaling_governor_1",
                values:[
`
                        for GOVERNOR in \`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
                                echo "\"$GOVERNOR\","
                        done
`
                ],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, CANCEL ],
				to:"/sys/devices/system/cpu/cpufreq"
			},
			{
				on:REFRESH,
				do:REFRESH,
				to:"/sys/devices/system/cpu/cpufreq"
			}
		]
        }},
	{ SOptionList:{
		title:"CPU2",
		default:`cat /sys/kernel/msm_limiter/scaling_governor_2`,
                action:"generic /sys/kernel/msm_limiter/scaling_governor_2",
                values:[
`
                        for GOVERNOR in \`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
                                echo "\"$GOVERNOR\","
                        done
`
                ],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, CANCEL ],
				to:"/sys/devices/system/cpu/cpufreq"
			},
			{
				on:REFRESH,
				do:REFRESH,
				to:"/sys/devices/system/cpu/cpufreq"
			}
		]
        }},
	{ SOptionList:{
		title:"CPU3",
		default:`cat /sys/kernel/msm_limiter/scaling_governor_3`,
                action:"generic /sys/kernel/msm_limiter/scaling_governor_3",
                values:[
`
                        for GOVERNOR in \`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
                                echo "\"$GOVERNOR\","
                        done
`
                ],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, CANCEL ],
				to:"/sys/devices/system/cpu/cpufreq"
			},
			{
				on:REFRESH,
				do:REFRESH,
				to:"/sys/devices/system/cpu/cpufreq"
			}
		]
        }},
	{ STitleBar:{
		title:"Governor tunables"
        }},
	{ STreeDescriptor:{
		description:"The various configuration items which are governor-dependent.",
		path:"/sys/devices/system/cpu/cpufreq",
		generic: {
			directory: {
				STreeDescriptor:{
					generic: {
						directory: {},
						element: {
							SGeneric: { title:"@NAME" }
						}
					},
					matched: {
						elements: [
							{ "sampling_rate" : {
								SSeekBar: {
									title:"Sampling rate",
									description:"The sampling rate controls the frequency in which the governor polls for frequency changes.",
									min:10000, max:300000, step:10000, unit:"ms"
								}
							}}
						]
					},
					exclude: [
						"boost_duration",
						"boostpulse",
						"cpu_utilization",
						"sampling_rate_min",
						"up_threshold_h",
						"up_threshold_l",
						"multi_phase_freq_tbl",
						"profile_list",
						"version_profiles",
						"profile"
					]
				}
			}
		},
		exclude: [ "kset", "stats" ]
	}},
    ]
}
CTAG